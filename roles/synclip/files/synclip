#!/bin/python
# {{ description }}
# Requires: xclip, wl-clipboard

import subprocess, time

def get_exec_command(command):
    try:
        output = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout
        return output.decode('utf-8').strip()
    except (subprocess.CalledProcessError, UnicodeDecodeError) as e:
        return None

def set_exec_command(command, content):
    try:
        subprocess.run(command, input=content.encode('utf-8', errors='replace'), shell=True, check=True)
    except subprocess.CalledProcessError as e:
        pass

def sync_clipboards(type, clipboard):
    wl_primary_option = '-p' if type == 'primary' else ''

    wayland_clipboard = get_exec_command(f"wl-paste {wl_primary_option}")
    x11_clipboard = get_exec_command(f"xclip -o -selection {type}")

    # print(f"[Debug][{type}] c: {clipboard}, cw: {wayland_clipboard}, cx: {x11_clipboard}")

    if wayland_clipboard and wayland_clipboard != clipboard:
        set_exec_command(f"xclip -selection {type}", wayland_clipboard)
        clipboard = wayland_clipboard
        print(f"Synced X11 {type}")
    elif x11_clipboard and x11_clipboard != clipboard:
        set_exec_command(f"wl-copy {wl_primary_option}", x11_clipboard)
        clipboard = x11_clipboard
        print(f"Synced Wayland {type}")

    return clipboard

def main():
    refresh_time = 0.2

    primary_latest = ''
    clipboard_latest = ''

    while True:
        primary_latest = sync_clipboards('primary', primary_latest)
        clipboard_latest = sync_clipboards('clipboard', clipboard_latest)
        time.sleep(refresh_time)

if __name__ == "__main__":
    main()